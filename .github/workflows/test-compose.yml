# .github/workflows/test-compose.yml

name: Test Docker Compose

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # STEP 1: Dynamically create an environment file named '.env.ci'
      # This step will only add a line to the file if the corresponding secret is not empty.
      - name: Create CI Environment File
        env:
          # Map ALL of your secrets here
          REDIS_URL: ${{ secrets.REDIS_URL }}
          CONTAINERPORT_API: ${{ secrets.CONTAINERPORT_API }}
          CONTAINERPORT_MCP_IMAP: ${{ secrets.CONTAINERPORT_MCP_IMAP }}
          CONTAINERPORT_QDRANT: ${{ secrets.CONTAINERPORT_QDRANT }}
          EMBEDDING_VOYAGE_API_KEY: ${{ secrets.EMBEDDING_VOYAGE_API_KEY }}
          EMBEDDING_OPENAI_API_KEY: ${{ secrets.EMBEDDING_OPENAI_API_KEY }}
          DISABLE_LOG_FORWARDING: ${{ secrets.DISABLE_LOG_FORWARDING }}
          QDRANT_NAMESPACE_UUID: ${{ secrets.QDRANT_NAMESPACE_UUID }}
          FRONTEND_HOST_PORT: ${{ secrets.FRONTEND_HOST_PORT }}
        run: |
          echo "Creating .env file with only the secrets that are set..."
          touch .env
          
          # The '[ -n "$VAR" ]' check means "if the variable is not an empty string"
          if [ -n "$REDIS_URL" ]; then echo "REDIS_URL=$REDIS_URL" >> .env.ci; fi
          if [ -n "$CONTAINERPORT_API" ]; then echo "CONTAINERPORT_API=$CONTAINERPORT_API" >> .env.ci; fi
          if [ -n "$CONTAINERPORT_MCP_IMAP" ]; then echo "CONTAINERPORT_MCP_IMAP=$CONTAINERPORT_MCP_IMAP" >> .env.ci; fi
          if [ -n "$CONTAINERPORT_QDRANT" ]; then echo "CONTAINERPORT_QDRANT=$CONTAINERPORT_QDRANT" >> .env.ci; fi
          if [ -n "$EMBEDDING_VOYAGE_API_KEY" ]; then echo "EMBEDDING_VOYAGE_API_KEY=$EMBEDDING_VOYAGE_API_KEY" >> .env.ci; fi
          if [ -n "$AGENTLOGGER_ENABLE_ANONIMIZER" ]; then echo "AGENTLOGGER_ENABLE_ANONIMIZER=$AGENTLOGGER_ENABLE_ANONIMIZER" >> .env.ci; fi
          if [ -n "$AGENTLOGGER_OPENROUTER_ANONIMIZER_API_KEY" ]; then echo "AGENTLOGGER_OPENROUTER_ANONIMIZER_API_KEY=$AGENTLOGGER_OPENROUTER_ANONIMIZER_API_KEY" >> .env.ci; fi
          if [ -n "$AGENTLOGGER_OPENROUTER_ANONIMIZER_MODEL" ]; then echo "AGENTLOGGER_OPENROUTER_ANONIMIZER_MODEL=$AGENTLOGGER_OPENROUTER_ANONIMIZER_MODEL" >> .env.ci; fi
          if [ -n "$EMBEDDING_OPENAI_API_KEY" ]; then echo "EMBEDDING_OPENAI_API_KEY=$EMBEDDING_OPENAI_API_KEY" >> .env.ci; fi
          if [ -n "$DISABLE_LOG_FORWARDING" ]; then echo "DISABLE_LOG_FORWARDING=$DISABLE_LOG_FORWARDING" >> .env.ci; fi
          if [ -n "$QDRANT_NAMESPACE_UUID" ]; then echo "QDRANT_NAMESPACE_UUID=$QDRANT_NAMESPACE_UUID" >> .env.ci; fi
          if [ -n "$FRONTEND_HOST_PORT" ]; then echo "FRONTEND_HOST_PORT=$FRONTEND_HOST_PORT" >> .env.ci; fi

          echo "--- Contents of generated .env.ci file: ---"
          cat .env

      # STEP 2: Run Docker Compose using ONLY the generated .env.ci file
      - name: Build and Run Application
        run: docker compose up -d --build

      # STEP 3: Check the status of the running containers
      - name: Check Container Status
        run: |
          echo "Waiting 20 seconds..."
          sleep 20
          docker compose ps